services:
  web:
    build:
      context: .
      dockerfile: app/Dockerfile
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./:/workspace
      - static_volume:/static
      - media_volume:/media
    expose:
      - "8000"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 8000 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

  db:
    image: postgres:16
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 3s
      retries: 10

  redis:
    image: redis:alpine
    command: ["redis-server"]
    volumes:
      - ./data/redis:/data

  nginx:
    image: nginx:alpine
    depends_on:
      - web
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
    ports:
      - "8080:80"
  frontend:
    image: node:22-alpine
    working_dir: /frontend
    volumes:
      - ./frontend:/frontend
    command: sh -lc "npm ci || npm i && npm run dev -- --host 0.0.0.0"
    expose:
      - "5173"
    environment:
      - VITE_PORT=5173
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true

volumes:
  static_volume:
  media_volume:
